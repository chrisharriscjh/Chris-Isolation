{
    "critiques": {
        "680": {
            "rubric_items": {
                "7303": {
                    "result": "failed",
                    "observation": "Not all of the tests passed.\n\n```\n************************************************************************\n                         Test Failure Feedback                          \n************************************************************************\n\nFailed Test: 14. Submission includes heuristic_analysis.pdf\n----------------------------------------------------------------------\nAssertionError: False is not true : You must submit a report named heuristic_analysis.pdf for review.\n\n\nFailed Test: 15. Submission includes research_review.pdf\n----------------------------------------------------------------------\nAssertionError: False is not true : You must submit a report named research_review.pdf for review.\n\n\n************************************************************************\n                          Test Result Summary                           \n************************************************************************\n\n14. Submission includes heuristic_analysis.pdf:                        F\n15. Submission includes research_review.pdf:                           F\n\n------------------------------------------------------------------------\n            . - Test Passed    F - Test Failed    E - Error             \n\n```"
                },
                "5510": {
                    "result": "failed",
                    "observation": "Not all of the tests passed.\n\n```\n************************************************************************\n                         Test Failure Feedback                          \n************************************************************************\n\nFailed Test: 2. Test functionality of MinimaxPlayer.minimax()\n----------------------------------------------------------------------\nAssertionError: False is not true : Your MinimaxAgent.minimax function did not call the heuristic evaluation function in all of the expected set of leaf nodes configurations in the game tree as player 1. Make sure that you are using the self.score() method to evaluate the board, and not calling one of the heuristic functions directly. Leaf nodes are shown as (player_1, player_2) location pairs. Optional nodes may or may not be visited depending on your termination test.\n\nExpected leaf nodes:\n{((0, 1), (2, 5)), ((1, 0), (2, 5)), ((0, 3), (2, 5)), ((1, 4), (2, 5)), ((4, 1), (2, 5)), ((3, 0), (2, 5))}\nOptional leaf nodes:\nset()\nLeaf nodes your agent evaluated:\nset()\nSkipped nodes:\n{((0, 3), (2, 5)), ((1, 4), (2, 5)), ((0, 1), (2, 5)), ((1, 0), (2, 5)), ((4, 1), (2, 5)), ((3, 0), (2, 5))}\nExtra nodes:\nset()\n\nTest Case Details:\n------------------\nHeuristic: open_move_score\nDepth limit: 1\nInitial Board State:\n     0   1   2   3   4   5   6   7   8\n0  |   |   |   |   |   |   |   |   |   | \n1  |   |   |   |   |   |   |   |   |   | \n2  |   |   | 1 |   | - | 2 | - |   |   | \n3  |   |   |   |   | - |   |   |   |   | \n4  |   |   | - | - | - | - | - |   |   | \n5  |   |   |   |   | - |   |   |   |   | \n6  |   |   |   | - |   |   |   |   |   | \n7  |   |   |   |   |   |   |   |   |   | \n8  |   |   |   |   |   |   |   |   |   | \n\ngame._board_state:\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 20]\n\n\n\nFailed Test: 7. Test functionality of AlphaBetaPlayer.alphabeta()\n----------------------------------------------------------------------\nAssertionError: Failed to cut off search -- expanded too many nodes. (i.e., your agent did not prune at this node, but a correct alpha beta search did prune at this node when following the same expansion order that your agent followed.)\nAlpha: 3.0\nBeta: 3.0\nGame tree evaluation order:\n[(4, 4), (5, 7), (7, 3)]\n[(2, 6)]\n\nNodes are shown with each layer sorted in the order the nodes were expanded\nduring search.  All nodes in each successive layer are children of the\nfurthest-right node in the parent layer above it.\n\nTest Case Details:\n------------------\nHeuristic: open_move_score\nDepth limit: 2\nInitial Board State:\n     0   1   2   3   4   5   6   7   8\n0  |   |   |   |   |   |   |   |   |   | \n1  |   |   |   |   |   |   |   |   |   | \n2  |   |   |   | - | - | - |   |   |   | \n3  |   |   | - | - |   | - | - | - |   | \n4  |   |   | - |   |   | 2 | - |   |   | \n5  |   |   | - | - | - | - | - |   |   | \n6  |   |   |   | - | - | 1 |   |   |   | \n7  |   |   |   |   |   | - |   |   |   | \n8  |   |   |   |   |   |   |   |   |   | \n\ngame._board_state:\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 51]\n\n\n\nFailed Test: 8. Test that alphabeta() raises SearchTimeout when the timer expires\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 421, in alphabeta\n    move_score, _ = self.min_value(game.forecast_move(move), depth - 1, self.alpha, self.beta)\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 329, in min_value\n    v, b = self.max_value(game.forecast_move(move), depth - 1, alpha, beta)\n\n                     ...lines elided for space...                     \n\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 329, in min_value\n    v, b = self.max_value(game.forecast_move(move), depth - 1, alpha, beta)\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 353, in max_value\n    v, a = self.min_value(game.forecast_move(move), depth - 1, alpha, beta)\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 329, in min_value\n    v, b = self.max_value(game.forecast_move(move), depth - 1, alpha, beta)\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 353, in max_value\n    v, a = self.min_value(game.forecast_move(move), depth - 1, alpha, beta)\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 329, in min_value\n    v, b = self.max_value(game.forecast_move(move), depth - 1, alpha, beta)\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 353, in max_value\n    v, a = self.min_value(game.forecast_move(move), depth - 1, alpha, beta)\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 329, in min_value\n    v, b = self.max_value(game.forecast_move(move), depth - 1, alpha, beta)\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 344, in max_value\n    return self.score(game, self), beta\n  File \"/home/grader/isolation/testcases.py\", line 575, in score\n    \"each call to avoid timeout. {1}\").format(search_name, self.timer())\nRuntimeError: Your alphabeta agent called the score_fn after the timer fell below 0 milliseconds remaining.  If you call any helper functions in your alphabeta search, then you need to check the timer inside each call to avoid timeout. -0.05216699999937191\n\n\nFailed Test: 9. Test iterative deepening in AlphaBetaPlayer.get_move()\n----------------------------------------------------------------------\nAssertionError: False is not true : Your agent did not call the search function self.alphabeta() the expected number of times.  Iterative deepening should call the search function with sequential values until SearchTimeout is raised. SearchTimeout was set to be raised after 24 moves, and your agent called the search function 1 times.\n\n\nFailed Test: 10. Test that AlphaBetaPlayer successfully plays a full game\n----------------------------------------------------------------------\nTraceback (most recent call last):\nRuntimeError: Timeout: 26.4002ms exceeds 25ms limit\n\nDuring handling of the above exception, another exception occurred:\n\nAssertionError: Your agent raised an error while attempting to play a complete game against another agent.  Make sure that your agent can play an entire game -- including selecting initial moves on an empty board.\nException: Timeout: 26.4002ms exceeds 25ms limit\n\n\nFailed Test: 12. Test output interface of custom_score_2()\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 63, in custom_score_2\n    raise NotImplementedError\nNotImplementedError\n\n\nFailed Test: 13. Test output interface of custom_score_3()\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/grader/isolation/workspace/game_agent.py\", line 89, in custom_score_3\n    raise NotImplementedError\nNotImplementedError\n\n\n************************************************************************\n                          Test Result Summary                           \n************************************************************************\n\n1. Test output interface of MinimaxPlayer.minimax():                   .\n2. Test functionality of MinimaxPlayer.minimax():                      F\n3. Test that minimax() raises SearchTimeout when the timer expires:    .\n4. Test that MinimaxPlayer successfully plays a full game:             .\n5. Test interface of AlphaBetaPlayer.alphabeta():                      .\n6. Test the interface of AlphaBetaPlayer.get_move():                   .\n7. Test functionality of AlphaBetaPlayer.alphabeta():                  F\n8. Test that alphabeta() raises SearchTimeout when the timer expires:  E\n9. Test iterative deepening in AlphaBetaPlayer.get_move():             F\n10. Test that AlphaBetaPlayer successfully plays a full game:          F\n11. Test output interface of custom_score():                           .\n12. Test output interface of custom_score_2():                         E\n13. Test output interface of custom_score_3():                         E\n\n------------------------------------------------------------------------\n            . - Test Passed    F - Test Failed    E - Error             \n\n```"
                }
            }
        }
    }
}